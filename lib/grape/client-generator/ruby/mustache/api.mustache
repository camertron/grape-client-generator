# encoding: UTF-8

{{> warning_message}}

require 'net/http'
require 'cgi'

module {{namespace}}
  class {{class_name}}

    attr_reader :base_url, :version, :format

    def initialize(base_url, options = {})
      @base_url = base_url
      @version = options[:version] || "{{default_version}}"
      @format = options[:format] || "{{default_format}}"
    end

  {{#endpoints}}
    def {{name}}(params = {})
      make_request("{{verb}}", "{{path}}", params, {{{path_params.inspect}}})
    end

  {{/endpoints}}
    private

    def make_request(verb, path, params, path_params)
      parse_response(
        case verb
          when "post"
            url = make_post_url(path, params, path_params)
            post(url, params)
          when "get"
            url = make_get_url(path, params, path_params)
            get(url)
          else
            raise "Unsupported HTTP verb."
        end
      )
    end

    def parse_response(response)
      send(:"parse_#{format}_response", response)
    end

    def parse_xml_response(response)
      XmlResponseParser.parse(response)
    end

    def parse_json_response(response)
      JsonResponseParser.parse(response)
    end

    def make_param_string(params)
      (params.map do |key, val|
        "#{CGI.escape(key.to_s)}=#{CGI.escape(val.to_s)}"
      end).join("&")
    end

    def interpolate_path_params(path, params, path_params)
      path = path_params.inject(path) do |final_path, param|
        final_path.gsub(":#{param}") do |match|
          # only remove from params if gsub finds a match
          params.delete(param.to_s) || params.delete(param.to_sym)
        end
      end

      path = path.gsub("(.:format)", ".#{format}").gsub(":version", version)
      [path, params]
    end

    def make_get_url(path, params, path_params)
      path, params = interpolate_path_params(path, params, path_params)
      File.join(base_url, path, "?#{make_param_string(params)}")
    end

    def make_post_url(path, params, path_params)
      path, params = interpolate_path_params(path, params, path_params)
      File.join(base_url, path)
    end

    def post(url, params)
      uri = parse_uri(url)
      http = Net::HTTP.new(uri.host, uri.port)
      request = Net::HTTP::Post.new(uri.path)
      request.body = make_param_string(params)
      resp = http.request(request)
      resp.body
    end

    def get(url)
      resp = Net::HTTP.get_response(parse_uri(url))
      resp.body
    end

    # hack to handle bug in URI.parse, which doesn't allow subdomains to contain underscores
    def parse_uri(url = nil)
      URI.parse(url)
    rescue URI::InvalidURIError
      host = url.match(".+\:\/\/([^\/]+)")[1]
      uri = URI.parse(url.sub(host, 'dummy-host'))
      uri.instance_variable_set('@host', host)
      uri
    end

  end
end